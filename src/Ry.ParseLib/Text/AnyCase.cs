namespace Ry.ParseLib.Text
{
    using System;

    /// <summary>
    /// Represents a range of characters and an operation that extends the range to any case range.
    /// </summary>
    /// <example>
    /// ['a' - 'z'] -> ['A' - 'Z', 'a' - 'z']
    /// ['A' - 'Z'] -> ['A' - 'Z', 'a' - 'z']
    /// </example>
    internal readonly struct AnyCase
    {
        public const int Set = 0;
        public const int Add = 1;
        public const int Odd = 2;
        public const int Even = 3;
        public const int Expand = 4;

        public int From { get; }
        public int To { get; }
        public int Operation { get; }
        public int Arg { get; }

        public UnicodeRange Range => new UnicodeRange(From, To);

        /// <summary>
        /// A collection of <see cref="AnyCase"/> items that was generated based on the <see cref="Char.ToLower(char)"/> and <see cref="Char.ToUpper(char)(char)"/> methods.
        /// </summary>
        public static AnyCase[] Ranges = new[] {
            new AnyCase(0x41, 0x5a, Add, 32),
            new AnyCase(0x61, 0x7a, Add, -32),
            new AnyCase(0xb5, 0xb5, Set, 0x39c),
            new AnyCase(0xc0, 0xd6, Add, 32),
            new AnyCase(0xd8, 0xde, Add, 32),
            new AnyCase(0xe0, 0xf6, Add, -32),
            new AnyCase(0xf8, 0xfe, Add, -32),
            new AnyCase(0xff, 0xff, Set, 0x178),
            new AnyCase(0x100, 0x12f, Even, 0),
            new AnyCase(0x130, 0x130, Set, 0x69),
            new AnyCase(0x131, 0x131, Set, 0x49),
            new AnyCase(0x132, 0x137, Even, 0),
            new AnyCase(0x139, 0x148, Odd, 0),
            new AnyCase(0x14a, 0x177, Even, 0),
            new AnyCase(0x178, 0x178, Set, 0xff),
            new AnyCase(0x179, 0x17e, Odd, 0),
            new AnyCase(0x17f, 0x17f, Set, 0x53),
            new AnyCase(0x180, 0x180, Set, 0x243),
            new AnyCase(0x181, 0x181, Set, 0x253),
            new AnyCase(0x182, 0x185, Even, 0),
            new AnyCase(0x186, 0x186, Set, 0x254),
            new AnyCase(0x187, 0x188, Odd, 0),
            new AnyCase(0x189, 0x18a, Add, 205),
            new AnyCase(0x18b, 0x18c, Odd, 0),
            new AnyCase(0x18e, 0x18e, Set, 0x1dd),
            new AnyCase(0x18f, 0x18f, Set, 0x259),
            new AnyCase(0x190, 0x190, Set, 0x25b),
            new AnyCase(0x191, 0x192, Odd, 0),
            new AnyCase(0x193, 0x193, Set, 0x260),
            new AnyCase(0x194, 0x194, Set, 0x263),
            new AnyCase(0x195, 0x195, Set, 0x1f6),
            new AnyCase(0x196, 0x196, Set, 0x269),
            new AnyCase(0x197, 0x197, Set, 0x268),
            new AnyCase(0x198, 0x199, Even, 0),
            new AnyCase(0x19a, 0x19a, Set, 0x23d),
            new AnyCase(0x19c, 0x19c, Set, 0x26f),
            new AnyCase(0x19d, 0x19d, Set, 0x272),
            new AnyCase(0x19e, 0x19e, Set, 0x220),
            new AnyCase(0x19f, 0x19f, Set, 0x275),
            new AnyCase(0x1a0, 0x1a5, Even, 0),
            new AnyCase(0x1a6, 0x1a6, Set, 0x280),
            new AnyCase(0x1a7, 0x1a8, Odd, 0),
            new AnyCase(0x1a9, 0x1a9, Set, 0x283),
            new AnyCase(0x1ac, 0x1ad, Even, 0),
            new AnyCase(0x1ae, 0x1ae, Set, 0x288),
            new AnyCase(0x1af, 0x1b0, Odd, 0),
            new AnyCase(0x1b1, 0x1b2, Add, 217),
            new AnyCase(0x1b3, 0x1b6, Odd, 0),
            new AnyCase(0x1b7, 0x1b7, Set, 0x292),
            new AnyCase(0x1b8, 0x1b9, Even, 0),
            new AnyCase(0x1bc, 0x1bd, Even, 0),
            new AnyCase(0x1bf, 0x1bf, Set, 0x1f7),
            new AnyCase(0x1c4, 0x1c4, Set, 0x1c6),
            new AnyCase(0x1c5, 0x1c5, Expand, 0),
            new AnyCase(0x1c6, 0x1c6, Set, 0x1c4),
            new AnyCase(0x1c7, 0x1c7, Set, 0x1c9),
            new AnyCase(0x1c8, 0x1c8, Expand, 0),
            new AnyCase(0x1c9, 0x1c9, Set, 0x1c7),
            new AnyCase(0x1ca, 0x1ca, Set, 0x1cc),
            new AnyCase(0x1cb, 0x1cb, Expand, 0),
            new AnyCase(0x1cc, 0x1cc, Set, 0x1ca),
            new AnyCase(0x1cd, 0x1dc, Odd, 0),
            new AnyCase(0x1dd, 0x1dd, Set, 0x18e),
            new AnyCase(0x1de, 0x1ef, Even, 0),
            new AnyCase(0x1f1, 0x1f1, Set, 0x1f3),
            new AnyCase(0x1f2, 0x1f2, Expand, 0),
            new AnyCase(0x1f3, 0x1f3, Set, 0x1f1),
            new AnyCase(0x1f4, 0x1f5, Even, 0),
            new AnyCase(0x1f6, 0x1f6, Set, 0x195),
            new AnyCase(0x1f7, 0x1f7, Set, 0x1bf),
            new AnyCase(0x1f8, 0x21f, Even, 0),
            new AnyCase(0x220, 0x220, Set, 0x19e),
            new AnyCase(0x222, 0x233, Even, 0),
            new AnyCase(0x23a, 0x23a, Set, 0x2c65),
            new AnyCase(0x23b, 0x23c, Odd, 0),
            new AnyCase(0x23d, 0x23d, Set, 0x19a),
            new AnyCase(0x23e, 0x23e, Set, 0x2c66),
            new AnyCase(0x241, 0x242, Odd, 0),
            new AnyCase(0x243, 0x243, Set, 0x180),
            new AnyCase(0x244, 0x244, Set, 0x289),
            new AnyCase(0x245, 0x245, Set, 0x28c),
            new AnyCase(0x246, 0x24f, Even, 0),
            new AnyCase(0x250, 0x250, Set, 0x2c6f),
            new AnyCase(0x251, 0x251, Set, 0x2c6d),
            new AnyCase(0x253, 0x253, Set, 0x181),
            new AnyCase(0x254, 0x254, Set, 0x186),
            new AnyCase(0x256, 0x257, Add, -205),
            new AnyCase(0x259, 0x259, Set, 0x18f),
            new AnyCase(0x25b, 0x25b, Set, 0x190),
            new AnyCase(0x260, 0x260, Set, 0x193),
            new AnyCase(0x263, 0x263, Set, 0x194),
            new AnyCase(0x268, 0x268, Set, 0x197),
            new AnyCase(0x269, 0x269, Set, 0x196),
            new AnyCase(0x26b, 0x26b, Set, 0x2c62),
            new AnyCase(0x26f, 0x26f, Set, 0x19c),
            new AnyCase(0x271, 0x271, Set, 0x2c6e),
            new AnyCase(0x272, 0x272, Set, 0x19d),
            new AnyCase(0x275, 0x275, Set, 0x19f),
            new AnyCase(0x27d, 0x27d, Set, 0x2c64),
            new AnyCase(0x280, 0x280, Set, 0x1a6),
            new AnyCase(0x283, 0x283, Set, 0x1a9),
            new AnyCase(0x288, 0x288, Set, 0x1ae),
            new AnyCase(0x289, 0x289, Set, 0x244),
            new AnyCase(0x28a, 0x28b, Add, -217),
            new AnyCase(0x28c, 0x28c, Set, 0x245),
            new AnyCase(0x292, 0x292, Set, 0x1b7),
            new AnyCase(0x345, 0x345, Set, 0x399),
            new AnyCase(0x370, 0x373, Even, 0),
            new AnyCase(0x376, 0x377, Even, 0),
            new AnyCase(0x37b, 0x37d, Add, 130),
            new AnyCase(0x386, 0x386, Set, 0x3ac),
            new AnyCase(0x388, 0x38a, Add, 37),
            new AnyCase(0x38c, 0x38c, Set, 0x3cc),
            new AnyCase(0x38e, 0x38f, Add, 63),
            new AnyCase(0x391, 0x3a1, Add, 32),
            new AnyCase(0x3a3, 0x3ab, Add, 32),
            new AnyCase(0x3ac, 0x3ac, Set, 0x386),
            new AnyCase(0x3ad, 0x3af, Add, -37),
            new AnyCase(0x3b1, 0x3c1, Add, -32),
            new AnyCase(0x3c2, 0x3c2, Set, 0x3a3),
            new AnyCase(0x3c3, 0x3cb, Add, -32),
            new AnyCase(0x3cc, 0x3cc, Set, 0x38c),
            new AnyCase(0x3cd, 0x3ce, Add, -63),
            new AnyCase(0x3cf, 0x3cf, Set, 0x3d7),
            new AnyCase(0x3d0, 0x3d0, Set, 0x392),
            new AnyCase(0x3d1, 0x3d1, Set, 0x398),
            new AnyCase(0x3d2, 0x3d2, Set, 0x3c5),
            new AnyCase(0x3d3, 0x3d3, Set, 0x3cd),
            new AnyCase(0x3d4, 0x3d4, Set, 0x3cb),
            new AnyCase(0x3d5, 0x3d5, Set, 0x3a6),
            new AnyCase(0x3d6, 0x3d6, Set, 0x3a0),
            new AnyCase(0x3d7, 0x3d7, Set, 0x3cf),
            new AnyCase(0x3d8, 0x3ef, Even, 0),
            new AnyCase(0x3f0, 0x3f0, Set, 0x39a),
            new AnyCase(0x3f1, 0x3f1, Set, 0x3a1),
            new AnyCase(0x3f2, 0x3f2, Set, 0x3f9),
            new AnyCase(0x3f4, 0x3f4, Set, 0x3b8),
            new AnyCase(0x3f5, 0x3f5, Set, 0x395),
            new AnyCase(0x3f7, 0x3f8, Odd, 0),
            new AnyCase(0x3f9, 0x3f9, Set, 0x3f2),
            new AnyCase(0x3fa, 0x3fb, Even, 0),
            new AnyCase(0x3fd, 0x3ff, Add, -130),
            new AnyCase(0x400, 0x40f, Add, 80),
            new AnyCase(0x410, 0x42f, Add, 32),
            new AnyCase(0x430, 0x44f, Add, -32),
            new AnyCase(0x450, 0x45f, Add, -80),
            new AnyCase(0x460, 0x481, Even, 0),
            new AnyCase(0x48a, 0x4bf, Even, 0),
            new AnyCase(0x4c0, 0x4c0, Set, 0x4cf),
            new AnyCase(0x4c1, 0x4ce, Odd, 0),
            new AnyCase(0x4cf, 0x4cf, Set, 0x4c0),
            new AnyCase(0x4d0, 0x523, Even, 0),
            new AnyCase(0x531, 0x556, Add, 48),
            new AnyCase(0x561, 0x586, Add, -48),
            new AnyCase(0x10a0, 0x10c5, Add, 7264),
            new AnyCase(0x1d79, 0x1d79, Set, 0xa77d),
            new AnyCase(0x1d7d, 0x1d7d, Set, 0x2c63),
            new AnyCase(0x1e00, 0x1e95, Even, 0),
            new AnyCase(0x1e9b, 0x1e9b, Set, 0x1e60),
            new AnyCase(0x1e9e, 0x1e9e, Set, 0xdf),
            new AnyCase(0x1ea0, 0x1eff, Even, 0),
            new AnyCase(0x1f00, 0x1f07, Add, 8),
            new AnyCase(0x1f08, 0x1f0f, Add, -8),
            new AnyCase(0x1f10, 0x1f15, Add, 8),
            new AnyCase(0x1f18, 0x1f1d, Add, -8),
            new AnyCase(0x1f20, 0x1f27, Add, 8),
            new AnyCase(0x1f28, 0x1f2f, Add, -8),
            new AnyCase(0x1f30, 0x1f37, Add, 8),
            new AnyCase(0x1f38, 0x1f3f, Add, -8),
            new AnyCase(0x1f40, 0x1f45, Add, 8),
            new AnyCase(0x1f48, 0x1f4d, Add, -8),
            new AnyCase(0x1f51, 0x1f51, Set, 0x1f59),
            new AnyCase(0x1f53, 0x1f53, Set, 0x1f5b),
            new AnyCase(0x1f55, 0x1f55, Set, 0x1f5d),
            new AnyCase(0x1f57, 0x1f57, Set, 0x1f5f),
            new AnyCase(0x1f59, 0x1f59, Set, 0x1f51),
            new AnyCase(0x1f5b, 0x1f5b, Set, 0x1f53),
            new AnyCase(0x1f5d, 0x1f5d, Set, 0x1f55),
            new AnyCase(0x1f5f, 0x1f5f, Set, 0x1f57),
            new AnyCase(0x1f60, 0x1f67, Add, 8),
            new AnyCase(0x1f68, 0x1f6f, Add, -8),
            new AnyCase(0x1f70, 0x1f71, Add, 74),
            new AnyCase(0x1f72, 0x1f75, Add, 86),
            new AnyCase(0x1f76, 0x1f77, Add, 100),
            new AnyCase(0x1f78, 0x1f79, Add, 128),
            new AnyCase(0x1f7a, 0x1f7b, Add, 112),
            new AnyCase(0x1f7c, 0x1f7d, Add, 126),
            new AnyCase(0x1f80, 0x1f87, Add, 8),
            new AnyCase(0x1f88, 0x1f8f, Add, -8),
            new AnyCase(0x1f90, 0x1f97, Add, 8),
            new AnyCase(0x1f98, 0x1f9f, Add, -8),
            new AnyCase(0x1fa0, 0x1fa7, Add, 8),
            new AnyCase(0x1fa8, 0x1faf, Add, -8),
            new AnyCase(0x1fb0, 0x1fb1, Add, 8),
            new AnyCase(0x1fb3, 0x1fb3, Set, 0x1fbc),
            new AnyCase(0x1fb8, 0x1fb9, Add, -8),
            new AnyCase(0x1fba, 0x1fbb, Add, -74),
            new AnyCase(0x1fbc, 0x1fbc, Set, 0x1fb3),
            new AnyCase(0x1fbe, 0x1fbe, Set, 0x399),
            new AnyCase(0x1fc3, 0x1fc3, Set, 0x1fcc),
            new AnyCase(0x1fc8, 0x1fcb, Add, -86),
            new AnyCase(0x1fcc, 0x1fcc, Set, 0x1fc3),
            new AnyCase(0x1fd0, 0x1fd1, Add, 8),
            new AnyCase(0x1fd8, 0x1fd9, Add, -8),
            new AnyCase(0x1fda, 0x1fdb, Add, -100),
            new AnyCase(0x1fe0, 0x1fe1, Add, 8),
            new AnyCase(0x1fe5, 0x1fe5, Set, 0x1fec),
            new AnyCase(0x1fe8, 0x1fe9, Add, -8),
            new AnyCase(0x1fea, 0x1feb, Add, -112),
            new AnyCase(0x1fec, 0x1fec, Set, 0x1fe5),
            new AnyCase(0x1ff3, 0x1ff3, Set, 0x1ffc),
            new AnyCase(0x1ff8, 0x1ff9, Add, -128),
            new AnyCase(0x1ffa, 0x1ffb, Add, -126),
            new AnyCase(0x1ffc, 0x1ffc, Set, 0x1ff3),
            new AnyCase(0x2126, 0x2126, Set, 0x3c9),
            new AnyCase(0x212a, 0x212a, Set, 0x6b),
            new AnyCase(0x212b, 0x212b, Set, 0xe5),
            new AnyCase(0x2132, 0x2132, Set, 0x214e),
            new AnyCase(0x214e, 0x214e, Set, 0x2132),
            new AnyCase(0x2160, 0x216f, Add, 16),
            new AnyCase(0x2170, 0x217f, Add, -16),
            new AnyCase(0x2183, 0x2184, Odd, 0),
            new AnyCase(0x24b6, 0x24cf, Add, 26),
            new AnyCase(0x24d0, 0x24e9, Add, -26),
            new AnyCase(0x2c00, 0x2c2e, Add, 48),
            new AnyCase(0x2c30, 0x2c5e, Add, -48),
            new AnyCase(0x2c60, 0x2c61, Even, 0),
            new AnyCase(0x2c62, 0x2c62, Set, 0x26b),
            new AnyCase(0x2c63, 0x2c63, Set, 0x1d7d),
            new AnyCase(0x2c64, 0x2c64, Set, 0x27d),
            new AnyCase(0x2c65, 0x2c65, Set, 0x23a),
            new AnyCase(0x2c66, 0x2c66, Set, 0x23e),
            new AnyCase(0x2c67, 0x2c6c, Odd, 0),
            new AnyCase(0x2c6d, 0x2c6d, Set, 0x251),
            new AnyCase(0x2c6e, 0x2c6e, Set, 0x271),
            new AnyCase(0x2c6f, 0x2c6f, Set, 0x250),
            new AnyCase(0x2c72, 0x2c73, Even, 0),
            new AnyCase(0x2c75, 0x2c76, Odd, 0),
            new AnyCase(0x2c80, 0x2ce3, Even, 0),
            new AnyCase(0x2d00, 0x2d25, Add, -7264),
            new AnyCase(0xa640, 0xa65f, Even, 0),
            new AnyCase(0xa662, 0xa66d, Even, 0),
            new AnyCase(0xa680, 0xa697, Even, 0),
            new AnyCase(0xa722, 0xa72f, Even, 0),
            new AnyCase(0xa732, 0xa76f, Even, 0),
            new AnyCase(0xa779, 0xa77c, Odd, 0),
            new AnyCase(0xa77d, 0xa77d, Set, 0x1d79),
            new AnyCase(0xa77e, 0xa787, Even, 0),
            new AnyCase(0xa78b, 0xa78c, Odd, 0),
            new AnyCase(0xff21, 0xff3a, Add, 32),
            new AnyCase(0xff41, 0xff5a, Add, -32),
            new AnyCase(0x10400, 0x10427, Add, 40),
            new AnyCase(0x10428, 0x1044f, Add, -40)
        };

        public AnyCase(int from, int to, int operation, int arg)
        {
            this.From = from;
            this.To = to;
            this.Operation = operation;
            this.Arg = arg;
        }

        public UnicodeRange Transfrom(int from, int to)
        {
            switch (Operation)
            {
                case Set:
                    return new UnicodeRange(Arg, Arg);
                case Add:
                    return new UnicodeRange(from + Arg, to + Arg);
                case Odd:
                    return new UnicodeRange((from - 1) | 1, to + (to & 1));
                case Even:
                    return new UnicodeRange(from & 0x7ffffffe, to | 1); // 0x7ffffffe = Int32.MaxValue - 1
                default:
                    return new UnicodeRange(from - 1, to + 1);
            }
        }
    }
}
